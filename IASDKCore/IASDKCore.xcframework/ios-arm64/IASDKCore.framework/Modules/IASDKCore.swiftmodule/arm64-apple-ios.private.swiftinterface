// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name IASDKCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Accelerate
import AdSupport
import AppTrackingTransparency
import AudioToolbox
import Foundation
@_exported import IASDKCore
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc public protocol IANativeAdSpotBuilder {
  @objc var adRequest: IAAdRequest? { get set }
  @objc var userInfo: [Swift.String : Any]? { get set }
  @objc var delegate: (any IANativeAdDelegate)? { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class IANativeAdSpot : ObjectiveC.NSObject {
  @objc final public let adRequest: IAAdRequest?
  @objc final public let userInfo: [Swift.String : Any]?
  @objc weak final public var delegate: (any IANativeAdDelegate)?
  @objc final public var spotId: Swift.String? {
    @objc get
  }
  @objc final public var muteVideo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public class func build(_ builder: (any IANativeAdSpotBuilder) -> Swift.Void) -> IANativeAdSpot
  @objc final public func loadAd(withMarkup adMarkup: Swift.String, withCompletion completion: @escaping (_ nativeAdAssets: IANativeAdAssets?, _ error: (any Swift.Error)?) -> Swift.Void)
  @available(*, unavailable, message: "Use build(_:) to create IANativeAdSpot")
  @objc override dynamic public init()
  @objc deinit
}
extension IANativeAdSpot : IAUnitDelegate {
  @objc final public func iaParentViewController(for unitController: IAUnitController?) -> UIKit.UIViewController
  @objc final public func iaAdDidReceiveClick(_ unitController: IAUnitController?)
  @objc final public func iaAdWillLogImpression(_ unitController: IAUnitController?)
  @objc final public func iaUnitControllerWillOpenExternalApp(_ unitController: IAUnitController?)
  @objc final public func iaAdDidExpire(_ unitController: IAUnitController?)
  @objc final public func iaUnitControllerWillPresentFullscreen(_ unitController: IAUnitController?)
  @objc final public func iaUnitControllerDidPresentFullscreen(_ unitController: IAUnitController?)
  @objc final public func iaUnitControllerWillDismissFullscreen(_ unitController: IAUnitController?)
  @objc final public func iaUnitControllerDidDismissFullscreen(_ unitController: IAUnitController?)
}
extension IANativeAdSpot : IAVideoContentDelegate {
  @objc final public func iaVideoCompleted(_ contentController: IAVideoContentController?)
  @objc final public func iaVideoContentController(_ contentController: IAVideoContentController?, videoInterruptedWithError error: any Swift.Error)
  @objc final public func iaVideoContentController(_ contentController: IAVideoContentController?, videoDurationUpdated videoDuration: Foundation.TimeInterval)
  @objc final public func iaVideoContentController(_ contentController: IAVideoContentController?, videoProgressUpdatedWithCurrentTime currentTime: Foundation.TimeInterval, totalTime: Foundation.TimeInterval)
}
extension IANativeAdSpot : DTXNativeImageContentDelegate {
  @objc final public func nativeImage(_ nativeImageContentController: DTXNativeImageContentController?, loadedImageFrom url: Foundation.URL)
  @objc final public func nativeImage(_ nativeImageContentController: DTXNativeImageContentController?, failedToLoadImageFrom url: Foundation.URL, error: any Swift.Error)
}
@objc public protocol IANativeAdDelegate {
  @objc func iaParentViewController(forAdSpot adSpot: IANativeAdSpot?) -> UIKit.UIViewController
  @objc optional func iaNativeAdDidReceiveClick(_ adSpot: IANativeAdSpot?, origin: Swift.String?)
  @objc optional func iaNativeAdWillLogImpression(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdWillOpenExternalApp(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdDidExpire(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdWillPresentFullscreen(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdDidPresentFullscreen(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdWillDismissFullscreen(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdDidDismissFullscreen(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAdVideoCompleted(_ adSpot: IANativeAdSpot?)
  @objc optional func iaNativeAd(_ adSpot: IANativeAdSpot?, videoInterruptedWithError error: any Swift.Error)
  @objc optional func iaNativeAd(_ adSpot: IANativeAdSpot?, videoDurationUpdated videoDuration: Foundation.TimeInterval)
  @objc optional func iaNativeAd(_ adSpot: IANativeAdSpot?, videoProgressUpdatedWithCurrentTime currentTime: Foundation.TimeInterval, totalTime: Foundation.TimeInterval)
  @objc optional func iaNativeAd(_ adSpot: IANativeAdSpot?, didLoadImageFromUrl url: Foundation.URL)
  @objc optional func iaNativeAdSpot(_ adSpot: IANativeAdSpot?, didFailToLoadImageFromUrl: Foundation.URL, with error: any Swift.Error)
}
extension Foundation.OperatingSystemVersion : Swift.Comparable {
  public static func == (lhs: Foundation.OperatingSystemVersion, rhs: Foundation.OperatingSystemVersion) -> Swift.Bool
  public static func < (lhs: Foundation.OperatingSystemVersion, rhs: Foundation.OperatingSystemVersion) -> Swift.Bool
}
extension Foundation.OperatingSystemVersion : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum ViewTag : Swift.Int {
  case title = 1
  case mediaView = 2
  case icon = 4
  case description = 5
  case rating = 6
  case cta = 7
  case root = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class IANativeAdAssets : ObjectiveC.NSObject {
  @objc final public let adTitle: Swift.String?
  @objc final public let adDescription: Swift.String?
  @objc final public let callToActionText: Swift.String?
  @objc final public let appIcon: UIKit.UIView?
  @objc final public let mediaView: UIKit.UIView
  @objc final public let rating: Foundation.NSNumber?
  @objc final public let mediaAspectRatio: Foundation.NSNumber?
  @objc(registerViewForInteraction:mediaView:iconView:clickableViews:) final public func registerViewForInteraction(rootView: UIKit.UIView?, mediaView: UIKit.UIView?, iconView: UIKit.UIView?, clickableViews: [UIKit.UIView]?)
  @objc deinit
}
public struct DTXConsentEvaluator {
  public enum Consent : Swift.Int {
    case unknown
    case denied
    case given
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct ConsentData {
  }
  public func evaluatePurpose(with purposeConsents: Swift.String?, tcfPurposeEnabled: Swift.Bool) -> Swift.Bool
  public func evaluateConsentData(with tcfVendorId: Swift.Int, vendorConsentsString: Swift.String?, tcString: Swift.String?, gdprConsentString: Swift.String?, gdprConsent: DTXConsentEvaluator.Consent) -> DTXConsentEvaluator.ConsentData
}
public struct DTXDisposable {
  public init(syncQueue: Dispatch.DispatchQueue, cancel: @escaping () -> Swift.Void)
  public func dispose()
  public static let empty: DTXDisposable
}
public struct DTXTask<A> {
}
extension DTXTask {
  public func subscribe(_ handler: @escaping (A) -> Swift.Void) -> DTXDisposable
}
@objc public enum DTXLogLevel : Swift.Int, Swift.Codable {
  case off = 0
  case fault = 1
  case error = 2
  case info = 3
  case debug = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(DTXLogger) public class DTXLogger : ObjectiveC.NSObject {
  @objc public static func setLogLevel(_ logLevel: DTXLogLevel)
  @objc deinit
}
extension ViewTag : Swift.Equatable {}
extension ViewTag : Swift.Hashable {}
extension ViewTag : Swift.RawRepresentable {}
extension DTXConsentEvaluator.Consent : Swift.Equatable {}
extension DTXConsentEvaluator.Consent : Swift.Hashable {}
extension DTXConsentEvaluator.Consent : Swift.RawRepresentable {}
extension DTXLogLevel : Swift.Equatable {}
extension DTXLogLevel : Swift.Hashable {}
extension DTXLogLevel : Swift.RawRepresentable {}
