#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef IASDKCORE_SWIFT_H
#define IASDKCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <IASDKCore/IASDKCore.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IASDKCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, DTXLogLevel, open) {
  DTXLogLevelOff = 0,
  DTXLogLevelFault = 1,
  DTXLogLevelError = 2,
  DTXLogLevelInfo = 3,
  DTXLogLevelDebug = 4,
};

SWIFT_CLASS_NAMED("DTXLogger")
@interface DTXLogger : NSObject
+ (void)setLogLevel:(enum DTXLogLevel)logLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class UIView;
@class NSNumber;
SWIFT_CLASS("_TtC9IASDKCore16IANativeAdAssets")
@interface IANativeAdAssets : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable adTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable adDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable callToActionText;
@property (nonatomic, readonly, strong) UIView * _Nullable appIcon;
@property (nonatomic, readonly, strong) UIView * _Nonnull mediaView;
@property (nonatomic, readonly, strong) NSNumber * _Nullable rating;
@property (nonatomic, readonly, strong) NSNumber * _Nullable mediaAspectRatio;
- (void)registerViewForInteraction:(UIView * _Nullable)rootView mediaView:(UIView * _Nullable)mediaView iconView:(UIView * _Nullable)iconView clickableViews:(NSArray<UIView *> * _Nullable)clickableViews;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class IANativeAdSpot;
@class UIViewController;
@class NSURL;
/// Protocol for receiving NativeAd-related events from an <code>IANativeAdSpot</code>.
SWIFT_PROTOCOL("_TtP9IASDKCore18IANativeAdDelegate_")
@protocol IANativeAdDelegate
/// Provides the parent view controller for presenting the native ad.
/// note:
/// This method is required and must be implemented.
/// \param adSpot The <code>IANativeAdSpot</code> instance requesting the view controller.
///
///
/// returns:
/// A <code>UIViewController</code> to present the native ad, with its <code>modalPresentationStyle</code> set to <code>UIModalPresentationStyle.fullScreen</code>.
- (UIViewController * _Nonnull)iaParentViewControllerForAdSpot:(IANativeAdSpot * _Nullable)adSpot SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when the native ad receives a click.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the click event.
///
/// \param origin The source of the click, represented as a string constant. Possible values include:
/// <ul>
///   <li>
///     <code>NATIVE_AD_TITLE</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_IMAGE</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_VIDEO</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_ICON</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_DESCRIPTION</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_RATING</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_CTA</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_ROOT</code>
///   </li>
///   <li>
///     <code>NATIVE</code>
///   </li>
/// </ul>
///
- (void)iaNativeAdDidReceiveClick:(IANativeAdSpot * _Nullable)adSpot origin:(NSString * _Nullable)origin;
/// Called when the native ad is about to log an impression.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the impression event.
///
- (void)iaNativeAdWillLogImpression:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad is about to open an external application.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdWillOpenExternalApp:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad expires.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the expiration event.
///
- (void)iaNativeAdDidExpire:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad is about to present a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdWillPresentFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad has presented a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdDidPresentFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad is about to dismiss a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdWillDismissFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad has dismissed a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdDidDismissFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad video completes playback.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdVideoCompleted:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad video is interrupted due to an error.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param error The <code>Error</code> object describing the cause of the interruption.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot videoInterruptedWithError:(NSError * _Nonnull)error;
/// Called when the native ad video duration is updated for a video ad.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param videoDuration The duration of the video in seconds.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot videoDurationUpdated:(NSTimeInterval)videoDuration;
/// Called to report the current progress of a playing video ad.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param currentTime The current playback time of the video in seconds.
///
/// \param totalTime The total duration of the video in seconds.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot videoProgressUpdatedWithCurrentTime:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
/// Called when a native ad image asset is successfully loaded.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param url The <code>URL</code> of the successfully loaded image.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot didLoadImageFromUrl:(NSURL * _Nonnull)url;
/// Called when a native ad image asset fails to load.
/// note:
/// This method is optional .
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param didFailToLoadImageFromUrl The <code>URL</code> of the image that failed to load.
///
/// \param error The <code>Error</code> object describing the cause of the failure.
///
- (void)iaNativeAdSpot:(IANativeAdSpot * _Nullable)adSpot didFailToLoadImageFromUrl:(NSURL * _Nonnull)didFailToLoadImageFromUrl with:(NSError * _Nonnull)error;
@end

@class IAAdRequest;
@protocol IANativeAdSpotBuilder;
SWIFT_CLASS("_TtC9IASDKCore14IANativeAdSpot")
@interface IANativeAdSpot : NSObject
@property (nonatomic, readonly, strong) IAAdRequest * _Nullable adRequest;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic, weak) id <IANativeAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSString * _Nullable spotId;
@property (nonatomic) BOOL muteVideo;
+ (IANativeAdSpot * _Nonnull)build:(SWIFT_NOESCAPE void (^ _Nonnull)(id <IANativeAdSpotBuilder> _Nonnull))builder SWIFT_WARN_UNUSED_RESULT;
- (void)loadAdWithMarkup:(NSString * _Nonnull)adMarkup withCompletion:(void (^ _Nonnull)(IANativeAdAssets * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use build(_:) to create IANativeAdSpot");
@end

@class DTXNativeImageContentController;
@interface IANativeAdSpot (SWIFT_EXTENSION(IASDKCore)) <DTXNativeImageContentDelegate>
- (void)nativeImage:(DTXNativeImageContentController * _Nullable)nativeImageContentController loadedImageFromURL:(NSURL * _Nonnull)url;
- (void)nativeImage:(DTXNativeImageContentController * _Nullable)nativeImageContentController failedToLoadImageFromURL:(NSURL * _Nonnull)url error:(NSError * _Nonnull)error;
@end

@class IAVideoContentController;
@interface IANativeAdSpot (SWIFT_EXTENSION(IASDKCore)) <IAVideoContentDelegate>
- (void)IAVideoCompleted:(IAVideoContentController * _Nullable)contentController;
- (void)IAVideoContentController:(IAVideoContentController * _Nullable)contentController videoInterruptedWithError:(NSError * _Nonnull)error;
- (void)IAVideoContentController:(IAVideoContentController * _Nullable)contentController videoDurationUpdated:(NSTimeInterval)videoDuration;
- (void)IAVideoContentController:(IAVideoContentController * _Nullable)contentController videoProgressUpdatedWithCurrentTime:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
@end

@class IAUnitController;
@interface IANativeAdSpot (SWIFT_EXTENSION(IASDKCore)) <IAUnitDelegate>
- (UIViewController * _Nonnull)IAParentViewControllerForUnitController:(IAUnitController * _Nullable)unitController SWIFT_WARN_UNUSED_RESULT;
- (void)IAAdDidReceiveClick:(IAUnitController * _Nullable)unitController;
- (void)IAAdWillLogImpression:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerWillOpenExternalApp:(IAUnitController * _Nullable)unitController;
- (void)IAAdDidExpire:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerWillPresentFullscreen:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerDidPresentFullscreen:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerWillDismissFullscreen:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerDidDismissFullscreen:(IAUnitController * _Nullable)unitController;
@end

SWIFT_PROTOCOL("_TtP9IASDKCore21IANativeAdSpotBuilder_")
@protocol IANativeAdSpotBuilder
@property (nonatomic, strong) IAAdRequest * _Nullable adRequest;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic, strong) id <IANativeAdDelegate> _Nullable delegate;
@end

/// /
typedef SWIFT_ENUM(NSInteger, ViewTag, open) {
  ViewTagTitle = 1,
  ViewTagMediaView = 2,
  ViewTagIcon = 4,
  ViewTagDescription = 5,
  ViewTagRating = 6,
  ViewTagCta = 7,
  ViewTagRoot = 8,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef IASDKCORE_SWIFT_H
#define IASDKCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <IASDKCore/IASDKCore.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IASDKCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, DTXLogLevel, open) {
  DTXLogLevelOff = 0,
  DTXLogLevelFault = 1,
  DTXLogLevelError = 2,
  DTXLogLevelInfo = 3,
  DTXLogLevelDebug = 4,
};

SWIFT_CLASS_NAMED("DTXLogger")
@interface DTXLogger : NSObject
+ (void)setLogLevel:(enum DTXLogLevel)logLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class UIView;
@class NSNumber;
SWIFT_CLASS("_TtC9IASDKCore16IANativeAdAssets")
@interface IANativeAdAssets : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable adTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable adDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable callToActionText;
@property (nonatomic, readonly, strong) UIView * _Nullable appIcon;
@property (nonatomic, readonly, strong) UIView * _Nonnull mediaView;
@property (nonatomic, readonly, strong) NSNumber * _Nullable rating;
@property (nonatomic, readonly, strong) NSNumber * _Nullable mediaAspectRatio;
- (void)registerViewForInteraction:(UIView * _Nullable)rootView mediaView:(UIView * _Nullable)mediaView iconView:(UIView * _Nullable)iconView clickableViews:(NSArray<UIView *> * _Nullable)clickableViews;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class IANativeAdSpot;
@class UIViewController;
@class NSURL;
/// Protocol for receiving NativeAd-related events from an <code>IANativeAdSpot</code>.
SWIFT_PROTOCOL("_TtP9IASDKCore18IANativeAdDelegate_")
@protocol IANativeAdDelegate
/// Provides the parent view controller for presenting the native ad.
/// note:
/// This method is required and must be implemented.
/// \param adSpot The <code>IANativeAdSpot</code> instance requesting the view controller.
///
///
/// returns:
/// A <code>UIViewController</code> to present the native ad, with its <code>modalPresentationStyle</code> set to <code>UIModalPresentationStyle.fullScreen</code>.
- (UIViewController * _Nonnull)iaParentViewControllerForAdSpot:(IANativeAdSpot * _Nullable)adSpot SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when the native ad receives a click.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the click event.
///
/// \param origin The source of the click, represented as a string constant. Possible values include:
/// <ul>
///   <li>
///     <code>NATIVE_AD_TITLE</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_IMAGE</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_VIDEO</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_ICON</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_DESCRIPTION</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_RATING</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_CTA</code>
///   </li>
///   <li>
///     <code>NATIVE_AD_ROOT</code>
///   </li>
///   <li>
///     <code>NATIVE</code>
///   </li>
/// </ul>
///
- (void)iaNativeAdDidReceiveClick:(IANativeAdSpot * _Nullable)adSpot origin:(NSString * _Nullable)origin;
/// Called when the native ad is about to log an impression.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the impression event.
///
- (void)iaNativeAdWillLogImpression:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad is about to open an external application.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdWillOpenExternalApp:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad expires.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the expiration event.
///
- (void)iaNativeAdDidExpire:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad is about to present a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdWillPresentFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad has presented a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdDidPresentFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad is about to dismiss a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdWillDismissFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad has dismissed a fullscreen view.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdDidDismissFullscreen:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad video completes playback.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
- (void)iaNativeAdVideoCompleted:(IANativeAdSpot * _Nullable)adSpot;
/// Called when the native ad video is interrupted due to an error.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param error The <code>Error</code> object describing the cause of the interruption.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot videoInterruptedWithError:(NSError * _Nonnull)error;
/// Called when the native ad video duration is updated for a video ad.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param videoDuration The duration of the video in seconds.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot videoDurationUpdated:(NSTimeInterval)videoDuration;
/// Called to report the current progress of a playing video ad.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param currentTime The current playback time of the video in seconds.
///
/// \param totalTime The total duration of the video in seconds.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot videoProgressUpdatedWithCurrentTime:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
/// Called when a native ad image asset is successfully loaded.
/// note:
/// This method is optional.
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param url The <code>URL</code> of the successfully loaded image.
///
- (void)iaNativeAd:(IANativeAdSpot * _Nullable)adSpot didLoadImageFromUrl:(NSURL * _Nonnull)url;
/// Called when a native ad image asset fails to load.
/// note:
/// This method is optional .
/// \param adSpot The <code>IANativeAdSpot</code> instance that triggered the event.
///
/// \param didFailToLoadImageFromUrl The <code>URL</code> of the image that failed to load.
///
/// \param error The <code>Error</code> object describing the cause of the failure.
///
- (void)iaNativeAdSpot:(IANativeAdSpot * _Nullable)adSpot didFailToLoadImageFromUrl:(NSURL * _Nonnull)didFailToLoadImageFromUrl with:(NSError * _Nonnull)error;
@end

@class IAAdRequest;
@protocol IANativeAdSpotBuilder;
SWIFT_CLASS("_TtC9IASDKCore14IANativeAdSpot")
@interface IANativeAdSpot : NSObject
@property (nonatomic, readonly, strong) IAAdRequest * _Nullable adRequest;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic, weak) id <IANativeAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSString * _Nullable spotId;
@property (nonatomic) BOOL muteVideo;
+ (IANativeAdSpot * _Nonnull)build:(SWIFT_NOESCAPE void (^ _Nonnull)(id <IANativeAdSpotBuilder> _Nonnull))builder SWIFT_WARN_UNUSED_RESULT;
- (void)loadAdWithMarkup:(NSString * _Nonnull)adMarkup withCompletion:(void (^ _Nonnull)(IANativeAdAssets * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use build(_:) to create IANativeAdSpot");
@end

@class DTXNativeImageContentController;
@interface IANativeAdSpot (SWIFT_EXTENSION(IASDKCore)) <DTXNativeImageContentDelegate>
- (void)nativeImage:(DTXNativeImageContentController * _Nullable)nativeImageContentController loadedImageFromURL:(NSURL * _Nonnull)url;
- (void)nativeImage:(DTXNativeImageContentController * _Nullable)nativeImageContentController failedToLoadImageFromURL:(NSURL * _Nonnull)url error:(NSError * _Nonnull)error;
@end

@class IAVideoContentController;
@interface IANativeAdSpot (SWIFT_EXTENSION(IASDKCore)) <IAVideoContentDelegate>
- (void)IAVideoCompleted:(IAVideoContentController * _Nullable)contentController;
- (void)IAVideoContentController:(IAVideoContentController * _Nullable)contentController videoInterruptedWithError:(NSError * _Nonnull)error;
- (void)IAVideoContentController:(IAVideoContentController * _Nullable)contentController videoDurationUpdated:(NSTimeInterval)videoDuration;
- (void)IAVideoContentController:(IAVideoContentController * _Nullable)contentController videoProgressUpdatedWithCurrentTime:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
@end

@class IAUnitController;
@interface IANativeAdSpot (SWIFT_EXTENSION(IASDKCore)) <IAUnitDelegate>
- (UIViewController * _Nonnull)IAParentViewControllerForUnitController:(IAUnitController * _Nullable)unitController SWIFT_WARN_UNUSED_RESULT;
- (void)IAAdDidReceiveClick:(IAUnitController * _Nullable)unitController;
- (void)IAAdWillLogImpression:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerWillOpenExternalApp:(IAUnitController * _Nullable)unitController;
- (void)IAAdDidExpire:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerWillPresentFullscreen:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerDidPresentFullscreen:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerWillDismissFullscreen:(IAUnitController * _Nullable)unitController;
- (void)IAUnitControllerDidDismissFullscreen:(IAUnitController * _Nullable)unitController;
@end

SWIFT_PROTOCOL("_TtP9IASDKCore21IANativeAdSpotBuilder_")
@protocol IANativeAdSpotBuilder
@property (nonatomic, strong) IAAdRequest * _Nullable adRequest;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic, strong) id <IANativeAdDelegate> _Nullable delegate;
@end

/// /
typedef SWIFT_ENUM(NSInteger, ViewTag, open) {
  ViewTagTitle = 1,
  ViewTagMediaView = 2,
  ViewTagIcon = 4,
  ViewTagDescription = 5,
  ViewTagRating = 6,
  ViewTagCta = 7,
  ViewTagRoot = 8,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
